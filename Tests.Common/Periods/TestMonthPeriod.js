// Generated by CoffeeScript 1.9.3
(function() {
  var Periods, should;

  should = require('should');

  Periods = require('../../PayrolleeMate.Common/Periods');

  describe('TestMonthPeriod', function() {
    var testPeriodCode402, testPeriodCode501, testPeriodCodeFeb, testPeriodCodeJan;
    testPeriodCodeJan = 201401;
    testPeriodCodeFeb = 201402;
    testPeriodCode501 = 201501;
    testPeriodCode402 = 201402;
    it('Should_Compare_Different_Periods_AsEqual_When_2014_01', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeJan);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCodeJan);
      return true.should.equal(testPeriodOne.isEqualToPeriod(testPeriodTwo));
    });
    it('Should_Compare_Different_Periods_AsEqual_When_2014_02', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeFeb);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCodeFeb);
      return true.should.equal(testPeriodOne.isEqualToPeriod(testPeriodTwo));
    });
    it('Should_Compare_Different_Periods_SameYear_AsGreater', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeJan);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCodeFeb);
      (testPeriodTwo.isEqualToPeriod(testPeriodOne)).should.equal(false);
      return (testPeriodTwo.isGreaterToPeriod(testPeriodOne)).should.equal(true);
    });
    it('Should_Compare_Different_Periods_SameYear_AsLess', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeJan);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCodeFeb);
      (testPeriodOne.isEqualToPeriod(testPeriodTwo)).should.equal(false);
      return (testPeriodOne.isLessToPeriod(testPeriodTwo)).should.equal(true);
    });
    it('Should_Compare_Different_Periods_SameMonth_AsGreater', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeJan);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCode501);
      (testPeriodTwo.isEqualToPeriod(testPeriodOne)).should.equal(false);
      return (testPeriodTwo.isGreaterToPeriod(testPeriodOne)).should.equal(true);
    });
    it('Should_Compare_Different_Periods_SameMonth_AsLess', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeJan);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCode501);
      (testPeriodOne.isEqualToPeriod(testPeriodTwo)).should.equal(false);
      return (testPeriodOne.isLessToPeriod(testPeriodTwo)).should.equal(true);
    });
    it('Should_Compare_Different_Periods_DifferentYear_AsGreater', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCode402);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCode501);
      (testPeriodTwo.isEqualToPeriod(testPeriodOne)).should.equal(false);
      return (testPeriodTwo.isGreaterToPeriod(testPeriodOne)).should.equal(true);
    });
    it('Should_Compare_Different_Periods_DifferentYear_AsLess', function() {
      var testPeriodOne, testPeriodTwo;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCode402);
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCode501);
      (testPeriodOne.isEqualToPeriod(testPeriodTwo)).should.equal(false);
      return (testPeriodOne.isLessToPeriod(testPeriodTwo)).should.equal(true);
    });
    it('Should_Return_Periods_Year_And_Month_2014_01', function() {
      var testPeriodOne;
      testPeriodOne = new Periods.MonthPeriod(testPeriodCodeJan);
      (testPeriodOne.Year()).should.equal(2014.);
      (testPeriodOne.Month()).should.equal(1.);
      (testPeriodOne.YearInt()).should.equal(2014.);
      return (testPeriodOne.MonthInt()).should.equal(1.);
    });
    it('Should_Return_Periods_Year_And_Month_2014_02', function() {
      var testPeriodTwo;
      testPeriodTwo = new Periods.MonthPeriod(testPeriodCodeFeb);
      (testPeriodTwo.Year()).should.equal(2014.);
      (testPeriodTwo.Month()).should.equal(2.);
      (testPeriodTwo.YearInt()).should.equal(2014.);
      return (testPeriodTwo.MonthInt()).should.equal(2.);
    });
    return it('Should_Return_Periods_Month_And_Year_Descriptions', function() {
      var test_period_402, test_period_501, test_period_feb, test_period_jan;
      test_period_jan = new Periods.MonthPeriod(testPeriodCodeJan);
      test_period_feb = new Periods.MonthPeriod(testPeriodCodeFeb);
      test_period_501 = new Periods.MonthPeriod(testPeriodCode501);
      test_period_402 = new Periods.MonthPeriod(testPeriodCode402);
      (test_period_jan.description()).should.equal("January 2014");
      (test_period_feb.description()).should.equal("February 2014");
      (test_period_501.description()).should.equal("January 2015");
      return (test_period_402.description()).should.equal("February 2014");
    });
  });

}).call(this);

//# sourceMappingURL=TestMonthPeriod.js.map
